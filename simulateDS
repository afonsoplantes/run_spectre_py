#!/usr/bin/env python3


# Imports {{{1
import re
from textwrap import dedent
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
from numpy import sqrt
from docopt import docopt
from inform import Error, Inform, comment, display, done, fatal, os_error
from psf_utils import PSF
from quantiphy import Quantity
from shlib import Run, render_command, set_prefs as shlib_set_prefs, to_path
import pandas as pd


# Globals {{{1
# plotting preferences {{{2
use_sci_notation = False  # alternative is to use SI scale factors
show_power = False  # display in V²/Hz if True and V/√Hz otherwise


## all samples from mit_db
DS_list = [
    100, 101, 102, 103, 104, 105, 106, 107, 108, 
    109, 111, 112, 113, 114, 115, 116, 117, 118, 
    119, 121, 122, 123, 124, 200, 201, 202, 203, 
    205, 207, 208, 209, 210, 212, 213, 214, 215, 
    217, 219, 220, 221, 222, 223, 228, 230, 231,
    232, 233, 234
]

# Parte 1
# DS_list = [119, 121, 122, 123, 124, 200]

for record_dir in DS_list:
    # generate a new netlist for mit_db files

    print("Simultation File " + str(record_dir))
    ### open seed file and chage amostras_mit
    fin = open("source_models/file.scs", "rt")
    data = fin.read()
    amostra_change="/home/usr/plantes/projeto_2018/sinais/mitdb/"+str(record_dir)+"/ExG_sig_MOD"
    data = data.replace("amostras_mit", amostra_change)
    fin.close()

    ### Generate a new input.scs file
    out_file = "input" + ".scs"
    fout = open(out_file, "wt")
    fout.write(data)
    fout.close()

    ## Simulte generated netlist
    # paths {{{2
    spectre_exe = "spectre"  # Spectre executable
    netlist_file = to_path(out_file)  # Spectre netlist file
    log_file = netlist_file.with_suffix(".log")  # Spectre logfile
    results_dir = netlist_file.with_suffix(".raw")  # simulation results directory
    psf_file = results_dir / "tran.tran.tran"  # Input PSF file

    sim_cmd = (spectre_exe, "=log", log_file, "-format", "psfascii", netlist_file,
            "-64")

    # simulate {{{1
    try:
        comment("\nRunning:")
        comment("   ", render_command(sim_cmd, {"=log": 1, "-format": 1}))
        spectre = Run(sim_cmd, "soEW0")
    except Error as e:
        if e.stdout:
            comment(e.stdout)
        e.terminate(culprit=spectre_exe, codicil=f"See {log_file} for more information.")

    # get results from psf file
    results = PSF(psf_file, sep=":")
    sweep = results.get_sweep()
    ## Get units
    x_name = sweep.name
    x_units = sweep.units
    ## Get sweep data from x axis
    x = sweep.abscissa

    y_units = "V"

    ## Get Raw data
    ECG_raw = results.get_signal("ECG")
    BPF_raw = results.get_signal("BPFd")
    ED_NEO1_raw = results.get_signal("ed_neo1")
    ED_NEO2_raw = results.get_signal("ed_neo2")

    ## Save good data
    ECG = ECG_raw.ordinate
    BPF = BPF_raw.ordinate
    ED_NEO1 = ED_NEO1_raw.ordinate
    ED_NEO2 = ED_NEO2_raw.ordinate

    ## Criate an empty Dataframe
    df = pd.DataFrame()

    ### Save arrays into dataframe
    df['Time'] = x
    df['ECG'] = ECG
    df['BPF'] = BPF
    df['ED_NEO1'] = ED_NEO1
    df['ED_NEO2'] = ED_NEO2

    ### Save dataframe to File
    out_file_csv = "ganho_75/input" + str(record_dir) + ".csv"
    df.to_csv(out_file_csv)
