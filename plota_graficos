#!/usr/bin/env python3


# Imports {{{1
import re
from textwrap import dedent
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
from numpy import sqrt
from docopt import docopt
from inform import Error, Inform, comment, display, done, fatal, os_error
from psf_utils import PSF
from quantiphy import Quantity
from shlib import Run, render_command, set_prefs as shlib_set_prefs, to_path



# Globals {{{1
# plotting preferences {{{2
use_sci_notation = False  # alternative is to use SI scale factors
show_power = False        # display in V²/Hz if True and V/√Hz otherwise

record_dir = int(input("Digite o numero da amostra: "))

out_file = "input" + str(record_dir) + ".scs"

# paths {{{2
spectre_exe = "spectre"  # Spectre executable
netlist_file = to_path(out_file)  # Spectre netlist file
log_file = netlist_file.with_suffix(".log")  # Spectre logfile
results_dir = netlist_file.with_suffix(".raw")  # simulation results directory
psf_file = results_dir / "tran.tran.tran"  # Input PSF file
ahdlLibPath = "/home/usr/plantes/simulation/Pulsfilter/fneo_nova_tb/adexl/results/data/Interactive.93/sharedData/CDS/ahdl/input.ahdlSimDB"
sim_cmd = (spectre_exe, "=log", log_file, "-format", "psfascii", netlist_file,
           "-64", "-ahdllibdir", ahdlLibPath)

# spectre  input.scs  +escchars +log ../psf/spectre.out  -format psfxl -raw ../psf   ++aps=conservative +lqtimeout 900 -maxw 5 -maxn 5 -64   -ahdllibdir /home/usr/plantes/simulation/Pulsfilter/fneo_nova_tb/adexl/results/data/Interactive.93/sharedData/CDS/ahdl/input.ahdlSimDB +logstatus


# plot results {{{1
try:
    # Extract data from psf file
    results = PSF(psf_file, sep=":")
    sweep = results.get_sweep()
    x_name = sweep.name
    x_units = sweep.units
    x = sweep.abscissa
    f0_sig = results.get_signal("ECG")
    f1_sig = results.get_signal("Comp1")
    if show_power:
        y_units = "V"
        y_f0 = f0_sig.ordinate
        y_f1 = f1_sig.ordinate
    else:
        y_units = "V"
        y_f0 = f0_sig.ordinate
        y_f1 = f1_sig.ordinate

    # build axis formatters
    x_axis_formatter = FuncFormatter(lambda v, p: Quantity(v, x_units).render())
    if use_sci_notation:
        adjust_plot_bounds = dict(left=0.2, right=0.98)
        y_axis_formatter = FuncFormatter(
            lambda v, p: Quantity(v, y_units).render(form="eng")
        )
    else:
        adjust_plot_bounds = dict(left=0.15, right=0.98)
        y_axis_formatter = FuncFormatter(
            lambda v, p: Quantity(v, y_units).render(form="si")
        )

    # create the pnoise plot
    figure, axes = plt.subplots(1, 1)
    # need to shift the figure a bit to the right because of y-axis labels
    figure.subplots_adjust(**adjust_plot_bounds)
    axes.plot(x, y_f0, linewidth=2, label="ECG")
    axes.plot(x, y_f1, linewidth=2, label="Comp2")
    axes.legend(frameon=False, loc="best")
    axes.set_xscale("log" if results.log_x(sweep) else "linear")
    axes.set_yscale("log" if results.log_y(sweep) else "linear")
    axes.xaxis.set_major_formatter(x_axis_formatter)
    axes.yaxis.set_major_formatter(y_axis_formatter)
    plt.suptitle(f"Transient analises")
    with Quantity.prefs(
        prec=2,
        map_sf=Quantity.map_sf_to_sci_notation,
        output_sf="YZEPTGMkmunpfazy",
        minus=Quantity.minus_sign,
    ):
        plt.show()
except Error as e:
    e.terminate()
except KeyboardInterrupt as e:
    done()
