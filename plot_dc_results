#!/usr/bin/env python3


# Imports {{{1
import re
from textwrap import dedent
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
from numpy import sqrt
from docopt import docopt
from inform import Error, Inform, comment, display, done, fatal, os_error
from psf_utils import PSF
from quantiphy import Quantity
from shlib import Run, render_command, set_prefs as shlib_set_prefs, to_path

# Globals {{{1
# plotting preferences {{{2
use_sci_notation = False  # alternative is to use SI scale factors
show_power = False        # display in V²/Hz if True and V/√Hz otherwise

#####################
# Netlist to plot
#####################

out_file = "input" + ".scs"
spectre_exe = "spectre"  # Spectre executable
netlist_file = to_path(out_file)  # Spectre netlist file
log_file = netlist_file.with_suffix(".log")  # Spectre logfile
results_dir = netlist_file.with_suffix(".raw")  # simulation results directory

## Analysis type
psf_file_dc = results_dir / "dc1.dc"  # Input PSF file for dc simulation
psf_file_ac = results_dir / "ac1.dc"  # Input PSF file for ac simulation


#####################
# Plot DC Results
#####################

# plot results {{{1
try:
    # Get results from psf file
    results = PSF(psf_file_dc, sep=":")
    sweep = results.get_sweep()
    
    # Get units Vin
    x_name = sweep.name
    x_units = sweep.units
    # Get sweep data from x axis
    v_in = sweep.abscissa

    # Get raw data
    v_out_raw = results.get_signal("vo")
    # Get usable data
    v_out = v_out_raw.ordinate

    # Figure size
    plt.figure(figsize=(4.5, 3))

    plt.title("CS amplifier DC Sweep")
    plt.xlabel("Vin, V", fontsize=11)
    plt.ylabel('Vout, V', fontsize=11)

    plt.plot(v_in, v_out, color='red',)
    plt.show()
    plt.savefig('dc_sweep.svg', format='svg', pad_inches=0, bbox_inches='tight')
except Error as e:
    e.terminate()
except KeyboardInterrupt as e:
    done()
